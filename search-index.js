var searchIndex = {};
searchIndex['bmp'] = {"items":[[0,"","bmp","A small library for reading and writing BMP images.",null,null],[3,"Pixel","","The pixel data used in the `Image`.",null,null],[12,"r","","",0,null],[12,"g","","",0,null],[12,"b","","",0,null],[3,"BmpError","","The error type returned if the decoding of an image from disk fails.",null,null],[12,"kind","","",1,null],[12,"details","","",1,null],[3,"Image","","The image type provided by the library.",null,null],[3,"ImageIndex","","An `Iterator` returning the `x` and `y` coordinates of an image.",null,null],[4,"BmpErrorKind","","The different kinds of possible BMP errors.",null,null],[13,"WrongMagicNumbers","","",2,null],[13,"UnsupportedBitsPerPixel","","",2,null],[13,"UnsupportedCompressionType","","",2,null],[13,"UnsupportedBmpVersion","","",2,null],[13,"Other","","",2,null],[13,"BmpIoError","","",2,null],[13,"BmpByteorderError","","",2,null],[5,"open","","Returns a `BmpResult`, either containing an `Image` or a `BmpError`.",null,{"inputs":[{"name":"str"}],"output":{"name":"bmpresult"}}],[0,"consts","","Common color constants accessible by names.",null,null],[17,"ALICE_BLUE","bmp::consts","",null,null],[17,"ANTIQUE_WHITE","","",null,null],[17,"AQUA","","",null,null],[17,"AQUAMARINE","","",null,null],[17,"AZURE","","",null,null],[17,"BEIGE","","",null,null],[17,"BISQUE","","",null,null],[17,"BLACK","","",null,null],[17,"BLANCHED_ALMOND","","",null,null],[17,"BLUE","","",null,null],[17,"BLUE_VIOLET","","",null,null],[17,"BROWN","","",null,null],[17,"BURLYWOOD","","",null,null],[17,"CADET_BLUE","","",null,null],[17,"CHARTREUSE","","",null,null],[17,"CHOCOLATE","","",null,null],[17,"CORAL","","",null,null],[17,"CORNFLOWER_BLUE","","",null,null],[17,"CORNSILK","","",null,null],[17,"CRIMSON","","",null,null],[17,"CYAN","","",null,null],[17,"DARK_BLUE","","",null,null],[17,"DARK_CYAN","","",null,null],[17,"DARK_GOLDENROD","","",null,null],[17,"DARK_GRAY","","",null,null],[17,"DARK_GREEN","","",null,null],[17,"DARK_GREY","","",null,null],[17,"DARK_KHAKI","","",null,null],[17,"DARK_MAGENTA","","",null,null],[17,"DARK_OLIVE_GREEN","","",null,null],[17,"DARK_ORANGE","","",null,null],[17,"DARK_ORCHID","","",null,null],[17,"DARK_RED","","",null,null],[17,"DARK_SALMON","","",null,null],[17,"DARK_SEAGREEN","","",null,null],[17,"DARK_SLATE_BLUE","","",null,null],[17,"DARK_SLATE_GRAY","","",null,null],[17,"DARK_SLATE_GREY","","",null,null],[17,"DARK_TURQUOISE","","",null,null],[17,"DARK_VIOLET","","",null,null],[17,"DEEP_PINK","","",null,null],[17,"DEEP_SKYBLUE","","",null,null],[17,"DIM_GRAY","","",null,null],[17,"DIM_GREY","","",null,null],[17,"DODGER_BLUE","","",null,null],[17,"FIREBRICK","","",null,null],[17,"FLORAL_WHITE","","",null,null],[17,"FOREST_GREEN","","",null,null],[17,"FUCHSIA","","",null,null],[17,"GAINSBORO","","",null,null],[17,"GHOST_WHITE","","",null,null],[17,"GOLD","","",null,null],[17,"GOLDENROD","","",null,null],[17,"GRAY","","",null,null],[17,"GREY","","",null,null],[17,"GREEN","","",null,null],[17,"GREEN_YELLOW","","",null,null],[17,"HONEYDEW","","",null,null],[17,"HOT_PINK","","",null,null],[17,"INDIAN_RED","","",null,null],[17,"INDIGO","","",null,null],[17,"IVORY","","",null,null],[17,"KHAKI","","",null,null],[17,"LAVENDER","","",null,null],[17,"LAVENDERBLUSH","","",null,null],[17,"LAWN_GREEN","","",null,null],[17,"LEMON_CHIFFON","","",null,null],[17,"LIGHT_BLUE","","",null,null],[17,"LIGHT_CORAL","","",null,null],[17,"LIGHT_CYAN","","",null,null],[17,"LIGHT_GOLDENROD_YELLOW","","",null,null],[17,"LIGHT_GRAY","","",null,null],[17,"LIGHT_GREEN","","",null,null],[17,"LIGHT_GREY","","",null,null],[17,"LIGHT_PINK","","",null,null],[17,"LIGHT_SALMON","","",null,null],[17,"LIGHT_SEAGREEN","","",null,null],[17,"LIGHT_SKYBLUE","","",null,null],[17,"LIGHT_SLATE_GRAY","","",null,null],[17,"LIGHT_SLATE_GREY","","",null,null],[17,"LIGHT_STEEL_BLUE","","",null,null],[17,"LIGHT_YELLOW","","",null,null],[17,"LIME","","",null,null],[17,"LIME_GREEN","","",null,null],[17,"LINEN","","",null,null],[17,"MAGENTA","","",null,null],[17,"MAROON","","",null,null],[17,"MEDIUM_AQUAMARINE","","",null,null],[17,"MEDIUM_BLUE","","",null,null],[17,"MEDIUM_ORCHID","","",null,null],[17,"MEDIUM_PURPLE","","",null,null],[17,"MEDIUM_SEAGREEN","","",null,null],[17,"MEDIUM_SLATE_BLUE","","",null,null],[17,"MEDIUM_SPRING_GREEN","","",null,null],[17,"MEDIUM_TURQUOISE","","",null,null],[17,"MEDIUM_VIOLETRED","","",null,null],[17,"MIDNIGHT_BLUE","","",null,null],[17,"MINT_CREAM","","",null,null],[17,"MISTY_ROSE","","",null,null],[17,"MOCCASIN","","",null,null],[17,"NAVAJO_WHITE","","",null,null],[17,"NAVY","","",null,null],[17,"OLD_LACE","","",null,null],[17,"OLIVE","","",null,null],[17,"OLIVE_DRAB","","",null,null],[17,"ORANGE","","",null,null],[17,"ORANGE_RED","","",null,null],[17,"ORCHID","","",null,null],[17,"PALE_GOLDENROD","","",null,null],[17,"PALE_GREEN","","",null,null],[17,"PALE_TURQUOISE","","",null,null],[17,"PALE_VIOLETRED","","",null,null],[17,"PAPAYAWHIP","","",null,null],[17,"PEACHPUFF","","",null,null],[17,"PERU","","",null,null],[17,"PINK","","",null,null],[17,"PLUM","","",null,null],[17,"POWDER_BLUE","","",null,null],[17,"PURPLE","","",null,null],[17,"RED","","",null,null],[17,"ROSY_BROWN","","",null,null],[17,"ROYAL_BLUE","","",null,null],[17,"SADDLE_BROWN","","",null,null],[17,"SALMON","","",null,null],[17,"SANDY_BROWN","","",null,null],[17,"SEAGREEN","","",null,null],[17,"SEASHELL","","",null,null],[17,"SIENNA","","",null,null],[17,"SILVER","","",null,null],[17,"SKYBLUE","","",null,null],[17,"SLATE_BLUE","","",null,null],[17,"SLATE_GRAY","","",null,null],[17,"SLATE_GREY","","",null,null],[17,"SNOW","","",null,null],[17,"SPRING_GREEN","","",null,null],[17,"STEEL_BLUE","","",null,null],[17,"TAN","","",null,null],[17,"TEAL","","",null,null],[17,"THISTLE","","",null,null],[17,"TOMATO","","",null,null],[17,"TURQUOISE","","",null,null],[17,"VIOLET","","",null,null],[17,"WHEAT","","",null,null],[17,"WHITE","","",null,null],[17,"WHITE_SMOKE","","",null,null],[17,"YELLOW","","",null,null],[17,"YELLOW_GREEN","","",null,null],[6,"BmpResult","bmp","A result type, either containing an `Image` or a `BmpError`.",null,null],[11,"eq","","",0,{"inputs":[{"name":"pixel"},{"name":"pixel"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"pixel"},{"name":"pixel"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"pixel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"pixel"}],"output":{"name":"pixel"}}],[11,"eq","","",2,{"inputs":[{"name":"bmperrorkind"},{"name":"bmperrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"bmperrorkind"},{"name":"bmperrorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"bmperrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"bmperrorkind"}],"output":{"name":"bmperrorkind"}}],[11,"eq","","",1,{"inputs":[{"name":"bmperror"},{"name":"bmperror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"bmperror"},{"name":"bmperror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"bmperror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"bmperror"}],"output":{"name":"bmperror"}}],[11,"fmt","","",1,{"inputs":[{"name":"bmperror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_error","","",1,{"inputs":[{"name":"bmperror"},{"name":"error"}],"output":{"name":"bmperror"}}],[11,"from_error","","",1,{"inputs":[{"name":"bmperror"},{"name":"error"}],"output":{"name":"bmperror"}}],[11,"description","","",1,{"inputs":[{"name":"bmperror"}],"output":{"name":"str"}}],[11,"eq","","",3,{"inputs":[{"name":"image"},{"name":"image"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"image"},{"name":"image"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"image"}],"output":{"name":"image"}}],[11,"fmt","","",3,{"inputs":[{"name":"image"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new BMP Image with the `width` and `height` specified. It is initialized to\na black image by default.",3,{"inputs":[{"name":"image"},{"name":"u32"},{"name":"u32"}],"output":{"name":"image"}}],[11,"get_width","","Returns the `width` of the Image.",3,{"inputs":[{"name":"image"}],"output":{"name":"u32"}}],[11,"get_height","","Returns the `height` of the Image.",3,{"inputs":[{"name":"image"}],"output":{"name":"u32"}}],[11,"set_pixel","","Set the pixel value at the position of `width` and `height`.",3,{"inputs":[{"name":"image"},{"name":"u32"},{"name":"u32"},{"name":"pixel"}],"output":null}],[11,"get_pixel","","Returns the pixel value at the position of `width` and `height`.",3,{"inputs":[{"name":"image"},{"name":"u32"},{"name":"u32"}],"output":{"name":"pixel"}}],[11,"coordinates","","Returns a new `ImageIndex` that iterates over the image dimensions in top-bottom order.",3,{"inputs":[{"name":"image"}],"output":{"name":"imageindex"}}],[11,"save","","Saves the image to the path specified by `name`. The function will overwrite the contents\nif a file already exists with the same name.",3,{"inputs":[{"name":"image"},{"name":"str"}],"output":{"name":"result"}}],[6,"Item","","",null,null],[11,"next","","",4,{"inputs":[{"name":"imageindex"}],"output":{"name":"option"}}],[14,"px!","","Macro to generate a `Pixel` from `r`, `g` and `b` values.",null,null]],"paths":[[3,"Pixel"],[3,"BmpError"],[4,"BmpErrorKind"],[3,"Image"],[3,"ImageIndex"]]};
searchIndex['byteorder'] = {"items":[[0,"","byteorder","This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.",null,null],[4,"Error","","An error type for reading bytes.",null,null],[13,"UnexpectedEOF","","An unexpected EOF.",0,null],[13,"Io","","Any underlying IO error that occurs while reading bytes.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[11,"eq","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from_error","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from_error","std::io::error","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","byteorder","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[6,"Result","","A short-hand for `result::Result<T, byteorder::Error>`.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",4,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",4,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",4,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",4,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",4,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",4,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",4,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",4,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",4,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",4,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",4,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",4,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",4,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",4,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"read_u16","","",5,null],[11,"read_u32","","",5,null],[11,"read_u64","","",5,null],[11,"read_uint","","",5,null],[11,"write_u16","","",5,null],[11,"write_u32","","",5,null],[11,"write_u64","","",5,null],[11,"read_u16","","",6,null],[11,"read_u32","","",6,null],[11,"read_u64","","",6,null],[11,"read_uint","","",6,null],[11,"write_u16","","",6,null],[11,"write_u32","","",6,null],[11,"write_u64","","",6,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,null]],"paths":[[4,"Error"],[3,"Error"],[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
initSearch(searchIndex);
